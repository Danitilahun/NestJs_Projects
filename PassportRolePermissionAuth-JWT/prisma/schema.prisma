  // prisma/schema.prisma
   generator client {
    provider = "prisma-client-js"
  }
  
  datasource db {
    provider  = "postgresql"
    url        = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
  }

  model RefreshToken {
    id            String    @id @default(cuid())
    token         String    @unique
    userId        String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
  }

  model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password String?
    image         String?
    roles         UserRole[]
    tokens        RefreshToken[]
    permissions   UserPermission[]  
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
  }

  model Role{
    id            String    @id @default(cuid())
    name          String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    users         UserRole[]
    permissions   Permission[]
  }

  model UserRole{
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user      User      @relation( fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role      Role      @relation( fields: [roleId], references: [id], onDelete: Cascade)
    roleId String
  }

  model Permission{

    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    action String @unique 
    users     UserPermission[]    
    role      Role ?     @relation( fields: [roleId], references: [id], onDelete: Cascade)
    roleId String ?

  }

  model UserPermission{

    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user      User      @relation( fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role      Permission      @relation( fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String
  }

  model VerificationToken{
    id            String    @id @default(cuid())
    email String
    token  String @unique
    expires DateTime

    @@unique([email, token])

  }